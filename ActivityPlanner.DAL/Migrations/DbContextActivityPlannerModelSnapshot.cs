// <auto-generated />
using System;
using ActivityPlanner.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ActivityPlanner.DAL.Migrations
{
    [DbContext(typeof(DbContextActivityPlanner))]
    partial class DbContextActivityPlannerModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ActivityPlanner.Entities.Activity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("property_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("schedule")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("property_id");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("ActivityPlanner.Entities.Property", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("disabled_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("ActivityPlanner.Entities.Survey", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("activity_id")
                        .HasColumnType("integer");

                    b.Property<string>("answers")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("id");

                    b.HasIndex("activity_id")
                        .IsUnique();

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("ActivityPlanner.Entities.Activity", b =>
                {
                    b.HasOne("ActivityPlanner.Entities.Property", "Property")
                        .WithMany("Activity")
                        .HasForeignKey("property_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("ActivityPlanner.Entities.Survey", b =>
                {
                    b.HasOne("ActivityPlanner.Entities.Activity", "Activity")
                        .WithOne("Survey")
                        .HasForeignKey("ActivityPlanner.Entities.Survey", "activity_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("ActivityPlanner.Entities.Activity", b =>
                {
                    b.Navigation("Survey");
                });

            modelBuilder.Entity("ActivityPlanner.Entities.Property", b =>
                {
                    b.Navigation("Activity");
                });
#pragma warning restore 612, 618
        }
    }
}
